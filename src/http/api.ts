/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * nlw-connect
 * OpenAPI spec version: 1.0.0
 */
export type PostSubscriptionsBody = {
  name: string
  email: string
  /** @nullable */
  referrer?: string | null
}

export type PostSubscriptions201 = {
  subscriberId: string
}

/**
 * @nullable
 */
export type GetInviteSubscriberId302 =
  | (typeof GetInviteSubscriberId302)[keyof typeof GetInviteSubscriberId302]
  | null

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetInviteSubscriberId302 = {
  null: 'null',
} as const

export type GetSubscriberSubscriberIdRankingClicks200 = {
  count: number
}

export type GetSubscriberSubscriberIdRankingCount200 = {
  count: number
}

export type GetSubscriberSubscriberIdRankingPosition200 = {
  /** @nullable */
  position: number | null
}

export type GetRanking200RankingItem = {
  name: string
  position: number
}

export type GetRanking200 = {
  ranking: GetRanking200RankingItem[]
}

/**
 * @summary Subscribe someone to event
 */
export const getPostSubscriptionsUrl = () => {
  return `http://localhost:3333/subscriptions`
}

export const postSubscriptions = async (
  postSubscriptionsBody: PostSubscriptionsBody,
  options?: RequestInit
): Promise<PostSubscriptions201> => {
  const res = await fetch(getPostSubscriptionsUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(postSubscriptionsBody),
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: PostSubscriptions201 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Access invite link and redirects user
 */
export const getGetInviteSubscriberIdUrl = (subscriberId: string) => {
  return `http://localhost:3333/invite/${subscriberId}`
}

export const getInviteSubscriberId = async (
  subscriberId: string,
  options?: RequestInit
): Promise<unknown> => {
  const res = await fetch(getGetInviteSubscriberIdUrl(subscriberId), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: unknown = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Get subscriber invite clicks count
 */
export const getGetSubscriberSubscriberIdRankingClicksUrl = (
  subscriberId: string
) => {
  return `http://localhost:3333/subscriber/${subscriberId}/ranking/clicks`
}

export const getSubscriberSubscriberIdRankingClicks = async (
  subscriberId: string,
  options?: RequestInit
): Promise<GetSubscriberSubscriberIdRankingClicks200> => {
  const res = await fetch(
    getGetSubscriberSubscriberIdRankingClicksUrl(subscriberId),
    {
      ...options,
      method: 'GET',
    }
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetSubscriberSubscriberIdRankingClicks200 = body
    ? JSON.parse(body)
    : {}

  return data
}

/**
 * @summary Get subscriber invites count
 */
export const getGetSubscriberSubscriberIdRankingCountUrl = (
  subscriberId: string
) => {
  return `http://localhost:3333/subscriber/${subscriberId}/ranking/count`
}

export const getSubscriberSubscriberIdRankingCount = async (
  subscriberId: string,
  options?: RequestInit
): Promise<GetSubscriberSubscriberIdRankingCount200> => {
  const res = await fetch(
    getGetSubscriberSubscriberIdRankingCountUrl(subscriberId),
    {
      ...options,
      method: 'GET',
    }
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetSubscriberSubscriberIdRankingCount200 = body
    ? JSON.parse(body)
    : {}

  return data
}

/**
 * @summary Get subscribr ranking position
 */
export const getGetSubscriberSubscriberIdRankingPositionUrl = (
  subscriberId: string
) => {
  return `http://localhost:3333/subscriber/${subscriberId}/ranking/position`
}

export const getSubscriberSubscriberIdRankingPosition = async (
  subscriberId: string,
  options?: RequestInit
): Promise<GetSubscriberSubscriberIdRankingPosition200> => {
  const res = await fetch(
    getGetSubscriberSubscriberIdRankingPositionUrl(subscriberId),
    {
      ...options,
      method: 'GET',
    }
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetSubscriberSubscriberIdRankingPosition200 = body
    ? JSON.parse(body)
    : {}

  return data
}

/**
 * @summary Get ranking
 */
export const getGetRankingUrl = () => {
  return `http://localhost:3333/ranking`
}

export const getRanking = async (
  options?: RequestInit
): Promise<GetRanking200> => {
  const res = await fetch(getGetRankingUrl(), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetRanking200 = body ? JSON.parse(body) : {}

  return data
}
